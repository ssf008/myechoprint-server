#!/usr/bin/env python
# encoding: utf-8
import argparse
#import sys
import time
#import json
import os
import base64
import unicodedata
import sys
reload(sys)
sys.setdefaultencoding('utf8') 
from operator import itemgetter
from flask import Flask, jsonify, request
from echoprint_server import \
    decode_echoprint, query_inverted_index, load_inverted_index, create_inverted_index, \
    parsed_code_streamer, parsing_code_streamer

use_tornado = False
try:
    from tornado.wsgi import WSGIContainer
    from tornado.httpserver import HTTPServer
    from tornado.ioloop import IOLoop
    #use_tornado = True
except:
    print 'cannot import tornado'

app = Flask(__name__)


@app.route('/query/<method>/<userid>/<b64_string>', methods=['POST'])
#@app.route('/query', methods=['POST'])
def rest_query(method,userid,b64_string):
    NRES = 20

    feature = str(userid)+'.json'
    print "feature = ",feature
    featurelib = 'echolib/'+str(userid)+'.bin'
    print "featurelib = ",featurelib

    b = base64.b64decode(str(b64_string.decode('hex')))
    print "2================="
    file = open("test.mp3",'wb')
    file.write(b)
    file.close()

    p = os.popen('./echoprint-codegen test.mp3 {0}'.format(feature),'r')

    time.sleep(1)
    list1=['{0}'.format(featurelib)]
    app.inverted_index = load_inverted_index(list1)


     
    echoprint_string =open(feature).read()
    print type(echoprint_string),echoprint_string
    #echoprint_string = request.form['echoprint']
    #print "echoprint_string =",echoprint_string
    
    _, codes = decode_echoprint(str(echoprint_string))
    results = query_inverted_index(codes, app.inverted_index, str(method))
    # optionally augment results with gids
    if app.gids is not None:
        for r in results:
            r['id'] = app.gids[r['index']]
    return jsonify(results=results)

@app.route('/getfeature/<userid>/<b64_string>', methods=['POST'])
def test(userid,b64_string):


    
    #print "userid = ",type(userid)
    #print "b64_string = ",b64_string
    '''unicodedata.normalize('NFKD',b64_string).encode('ascii','ignore')'''
    #print "type = ",type(b64_string)
    feature = str(userid)+'.json'
    featurelib = 'echolib/'+str(userid)+'.bin'



    '''f=open(r'132.mp3','rb')
    a=base64.b64encode(f.read())
    f.close()
    print type(a),a
    b = base64.b64decode(a)'''
    print "1================="
    b = base64.b64decode(str(b64_string.decode('hex')))
    print "2================="
    file = open("test.mp3",'wb')
    file.write(b)
    file.close()

    p = os.popen('./echoprint-codegen test.mp3 {0}'.format(feature),'r')
    time.sleep(1)
    p2 = os.popen('cat {0} | echoprint-inverted-index {1}'.format(feature,featurelib))
    
    return jsonify(results='sucess') 

@app.route('/updatelib/<method>', methods=['POST'])
def test1(method):

    p1 = os.popen("./stop.sh")
    print "p1 = ",p1
    p2 = os.popen('cat *.json | echoprint-inverted-index {0}'.format(method))
    print "p2 = ",p2
    '''p3 = os.popen("./restart.sh")
    print "p3 = ",p3'''
    
    return jsonify(results="sucess") 

@app.route('/restartserver/', methods=['POST'])
def test3():

    ''' p1 = os.popen("./stop.sh")
    print "p1 = ",p1
    p2 = os.popen('cat *.json | echoprint-inverted-index {0}'.format(method))
    print "p2 = ",p2'''
    p3 = os.popen("./restart.sh")
    print "p3 = ",p3
    
    return jsonify(results="sucess") 

@app.route('/base64tomp3/<method>', methods=['POST'])
def test2(method):

    print method
    f=open(r'132.mp3','rb')

    #print f.read()
    a=base64.b64encode(f.read())
    mfile = open("mp3b64.json",'wb')
    mfile.write(a)
    mfile.close()
    f.close()
    
    print "tpye = ",type(a)
    b = base64.b64decode(a)
    file = open("mytest.mp3",'wb')
    file.write(b)
    file.close()
    return jsonify(results="sucess") 





if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--flask', action='store_true')
    parser.add_argument('-i', '--ids-file',
                        help='ids_file contains track ids, one per line')
    parser.add_argument('-p', '--port', type=int, default=5678,
                        help='service port (default: 5678)')
    #parser.add_argument('inverted_index_paths', nargs='+')
    args = parser.parse_args()

    '''app.inverted_index = load_inverted_index(args.inverted_index_paths)
    if app.inverted_index is None:
        print >> sys.stderr, 'loading inverted index from %s failed' % \
            args.inverted_index_dir
        exit(1)
    print 'loaded inverted index'''

    if args.ids_file is not None:
        app.gids = [l.strip() for l in open(args.ids_file)]
    else:
        app.gids = None

    if args.flask or (not use_tornado):
        print 'starting app with flask'
        app.run(debug=True, host='0.0.0.0', port=args.port)
    else:
        http_server = HTTPServer(WSGIContainer(app))
        http_server.listen(args.port)
        IOLoop.instance().start()
